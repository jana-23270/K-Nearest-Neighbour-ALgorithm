# -*- coding: utf-8 -*-
"""Insurance_claims classification using KNeighborsClassifier .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-S4g5J_ffvZ-yXBFH1eVAjm_f4I4iDpi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/insurance_claims.csv')

df.head(10)

df.tail(10)

df.shape

df.info()

df.describe()

a=df['age']
plt.plot(a)

b=df['policy_csl']
c=df['policy_bind_date']
plt.scatter(b,c)

d=df['auto_year']
plt.hist(d)

e=df['bodily_injuries']
plt.bar(e,height=100,width=100)

g=df['age']
plt.pie(g)

m=df['authorities_contacted']
n=df['auto_year']
sns.lineplot(x=m,y=n,data=df)

b=df['fraud_reported']
f=df['collision_type']
sns.scatterplot(x=b,y=f,data=df)

s=df['bodily_injuries']
i=df['auto_year']
sns.barplot(x=s,y=i,data=df)

sns.countplot(x='age',data=df)

sns.pairplot(df,hue='bodily_injuries')

x=[23,45,65,76,64]
h=[20,40,60,80,100]
sns.distplot(x,h)

df.isnull().sum()

d=df['age']
sns.boxplot(d)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

y=df['policy_bind_date']
df['policy_bind_date']=le.fit_transform(y)

t=df['policy_csl']
df['policy_csl']=le.fit_transform(t)

l=df['fraud_reported']
df['fraud_reported']=le.fit_transform(l)

m=df['police_report_available']
df['police_report_available']=le.fit_transform(m)

n=df['auto_make']
df['auto_make']=le.fit_transform(n)

f=df['auto_model']
df['auto_model']=le.fit_transform(f)

u=df['policy_state']
df['policy_state']=le.fit_transform(u)

y=df['insured_sex']
df['insured_sex']=le.fit_transform(y)

o=df['insured_education_level']
df['insured_education_level']=le.fit_transform(o)

x=df['insured_occupation']
df['insured_occupation']=le.fit_transform(x)

e=df['insured_hobbies']
df['insured_hobbies']=le.fit_transform(e)

t=df['insured_relationship']
df['insured_relationship']=le.fit_transform(t)

l=df['incident_type']
df['incident_type']=le.fit_transform(l)

q=df['collision_type']
df['collision_type']=le.fit_transform(q)

w=df['incident_severity']
df['incident_severity']=le.fit_transform(w)

r=df['authorities_contacted']
df['authorities_contacted']=le.fit_transform(r)

i=df['incident_state']
df['incident_state']=le.fit_transform(i)

j=df['incident_date']
df['incident_date']=le.fit_transform(j)

m=df['incident_city']
df['incident_city']=le.fit_transform(m)

n=df['incident_location']
df['incident_location']=le.fit_transform(n)

df

x=df.drop(['fraud_reported','_c39','policy_annual_premium','police_report_available','property_damage'],axis=1)
x

y=df['fraud_reported']

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

x_train

x_train.shape

x_test.shape

from sklearn.preprocessing import StandardScaler

std=StandardScaler()

a=std.fit_transform(x_train)
a

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier(n_neighbors=5)

clf=knn.fit(x_train,y_train)
clf

pred=knn.predict(x_test)

from sklearn.metrics import accuracy_score

accuracy_score(pred,y_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(pred,y_test)